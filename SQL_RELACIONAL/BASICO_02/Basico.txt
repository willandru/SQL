DML: Provides the ability to query inforation from the database and to insert tuples into, delete tuples from, and modify tuples in the database.
DDL: Data Definition Language allows the specification of the information about relations. It includes: 
	- Sche,a for each realtion
	- Type, of values associeted with each atribute
	- Integrity of constraints
	- Set of indices to be mantained for each realtion.
	- Security and authorization information for each relation.
	- The phisiscal storage structure of each realtion on disk.

TYPES IN SQL:
	-char(n)
	-varchar(n)
	-int
	-smallint
	-numeric(p,d)
	-real, double precision
	-float(n)


CREATE TABLE:

			*CREATE TABLE CONSTRUCT:	

				create table r
					( A1 D1, A2 D2, ..., An Dn, 
						(integrity_constraint_1), .... ,
						(integrity_constraint_k))

					Ai: Attribute name
					Di: Type of atribute value

			*TYPES OF INTEGRITY CONSTRAINTS:

				- primary key ( A1, ..., An)
				- foreign key(Am, ...., An) references r
				- not null

			*EXAMPLE:


				create table instructor(
				ID char(5),
				name varchar(20) not null,
				dept_name varchar(20),
				salary numeric(8,2),
				primary key(ID),
				foreign key (dept_name) references deparment);



				create table student(
				ID varcahr(5),
				name varchar(20) not null,
				dept_name varchar(20),
				tot_cred numeric(3,0),
				primary key (ID),
				foreign key (dept_name) references department);

				create table takes(
				ID varchar(5),
				course_id varchar(8),
				sec_id varchar(8),
				semester varchar(6),
				year numeric(4,0),
				grade varchar(2),
				primary key (ID, course_id, sec_id, semester, year),
				foreign key (ID) references student,
				foreign key (coirse_id, sec_id, semester, year) references section);


				create table course(
				course_id varchar(8),
				title varchar(50),
				dept_name varchar(20),
				credits numeric(2,0),
				primary key (course_id),
				foreign key (dept_name) references deparment);

UPDATES TO TABLES:

	-INSERT
		 insert into instructor values ('10211', 'Smith', 'Biology', 66000);
	-DELETE
		delete from students
	-DROP
		drop table r
	-ALTER
		alter table r add A D
				donde A es el nombre del atributo y D es el tipo/dominio; los nuevos valores se asignarán null
		alter table r drop A

BASIC QUERY STRUCTURE:

	select A1, A2, ....., An 
	from r1, r2, ...., rm
	where P
						Ai son los atributos
						ri son las relaciones/tablas
						P es algún predicado
				El resultado de una SQL query es una relacio/tabla

	SELECT == Select == select

THE SELECT CLAUSE:

	select *
	from instructor


	select '437'


	select '437' as FOO

	select 'A'
	from instructor